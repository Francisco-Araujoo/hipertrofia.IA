from typing import Dict, List, Optional, Any
from pydantic import BaseModel
from enum import Enum
import re
import random


class Gender(str, Enum):
    MALE = "male"
    FEMALE = "female"


class Goal(str, Enum):
    WEIGHT_LOSS = "weight_loss"
    MUSCLE_GAIN = "muscle_gain"
    TONING = "toning"
    MAINTENANCE = "maintenance"


class TrainingLevel(str, Enum):
    BEGINNER = "beginner"
    INTERMEDIATE = "intermediate"
    ADVANCED = "advanced"


class UserProfile(BaseModel):
    age: Optional[int] = None
    gender: Optional[Gender] = None
    height: Optional[float] = None  # in meters
    weight: Optional[float] = None  # in kg
    goal: Optional[Goal] = None
    training_level: Optional[TrainingLevel] = None
    training_days_per_week: Optional[int] = None


class IMCResult(BaseModel):
    value: float
    classification: str
    recommendations: List[str]


class TrainingPlan(BaseModel):
    goal: Goal
    level: TrainingLevel
    days_per_week: int
    exercises: List[Dict[str, Any]]
    nutrition_tips: List[str]
    supplements: List[str]


class HipertrofiaAI:
    """
    Hipertrofia.IA - Sistema inteligente para coaching fitness
    """

    def __init__(self):
        self.greetings = [
            "oi",
            "ol√°",
            "ola",
            "hey",
            "hello",
            "hi",
            "opa",
            "eai",
            "e ai",
            "bom dia",
            "boa tarde",
            "boa noite",
            "salve",
            "fala",
            "co√©",
            "beleza",
        ]

        self.farewell_responses = [
            "Tchau, guerreiro(a)! üí™\n\nFoi um prazer te ajudar! Lembra: **CONSIST√äNCIA √â TUDO!** üî•\n\nVolta sempre que precisar! Sua transforma√ß√£o n√£o para! üöÄ‚ú®",
            "At√© mais, campe√£o(√£)! üí™\n\nContinue firme no treino! **FOCO, FOR√áA E F√â!** üî•\n\nEstou sempre aqui quando precisar! üöÄ",
        ]

        self.knowledge_base = self._build_knowledge_base()

    def extract_personal_data(self, text: str) -> UserProfile:
        """
        Extrai dados pessoais do texto do usu√°rio
        """
        profile = UserProfile()
        text_lower = text.lower()

        # Extra√ß√£o de idade
        age_match = re.search(r"(\d{1,2})\s*anos?", text)
        if age_match:
            profile.age = int(age_match.group(1))

        # Extra√ß√£o de g√™nero
        if re.search(r"\b(homem|masculino|h|man|male)\b", text_lower):
            profile.gender = Gender.MALE
        elif re.search(r"\b(mulher|feminino|f|woman|female)\b", text_lower):
            profile.gender = Gender.FEMALE

        # Extra√ß√£o de altura (metros)
        height_match = re.search(r"(\d{1})[,.]?(\d{2})\s*m", text)
        if height_match:
            profile.height = float(f"{height_match.group(1)}.{height_match.group(2)}")

        # Extra√ß√£o de peso
        weight_match = re.search(r"(\d{2,3})\s*kg", text)
        if weight_match:
            profile.weight = float(weight_match.group(1))

        # Extra√ß√£o de objetivo
        if re.search(
            r"(perder peso|emagrecer|queimar gordura|cutting|definir)", text_lower
        ):
            profile.goal = Goal.WEIGHT_LOSS
        elif re.search(
            r"(ganhar massa|ganhar peso|hipertrofia|bulking|crescer)", text_lower
        ):
            profile.goal = Goal.MUSCLE_GAIN
        elif re.search(r"(tonificar|definir|manter|manuten√ß√£o)", text_lower):
            profile.goal = Goal.TONING

        # Extra√ß√£o de n√≠vel
        if re.search(r"(iniciante|come√ßando|primeira vez|nunca)", text_lower):
            profile.training_level = TrainingLevel.BEGINNER
        elif re.search(r"(intermedi√°rio|algum tempo|alguns meses)", text_lower):
            profile.training_level = TrainingLevel.INTERMEDIATE
        elif re.search(r"(avan√ßado|experiente|anos)", text_lower):
            profile.training_level = TrainingLevel.ADVANCED

        return profile

    def calculate_imc(self, weight: float, height: float) -> IMCResult:
        """
        Calcula o IMC e retorna classifica√ß√£o com recomenda√ß√µes
        """
        imc_value = weight / (height**2)

        if imc_value < 18.5:
            classification = "Abaixo do peso"
            recommendations = [
                "üöÄ Foco em ganhar peso saud√°vel",
                "üèãÔ∏è‚Äç‚ôÇÔ∏è Treino de for√ßa 4x/semana",
                "üçΩÔ∏è Super√°vit cal√≥rico controlado",
                "üíä Suplementos: Whey + Creatina + Hipercal√≥rico",
            ]
        elif 18.5 <= imc_value < 25:
            classification = "Peso ideal"
            recommendations = [
                "‚ú® Foco em recomposi√ß√£o corporal",
                "üí™ Treino de hipertrofia + cardio moderado",
                "üçΩÔ∏è Alimenta√ß√£o equilibrada",
                "üéØ Meta: Ganhar m√∫sculo + definir",
            ]
        elif 25 <= imc_value < 30:
            classification = "Sobrepeso"
            recommendations = [
                "üî• Foco em queimar gordura",
                "üèÉ‚Äç‚ôÇÔ∏è HIIT 20min + LISS 30min",
                "ü•ó D√©ficit cal√≥rico controlado",
                "üíä Suplementos: L-carnitina + Cafe√≠na + Whey",
            ]
        else:
            classification = "Obesidade"
            recommendations = [
                "‚ö†Ô∏è Prioridade: Perda de peso gradual",
                "üö∂‚Äç‚ôÇÔ∏è Caminhada di√°ria + treino leve",
                "ü•ó D√©ficit cal√≥rico supervisionado",
                "üë®‚Äç‚öïÔ∏è Acompanhamento m√©dico recomendado",
            ]

        return IMCResult(
            value=round(imc_value, 1),
            classification=classification,
            recommendations=recommendations,
        )

    def generate_training_plan(self, profile: UserProfile) -> TrainingPlan:
        """
        Gera plano de treino personalizado baseado no perfil
        """
        if not profile.goal:
            profile.goal = Goal.MUSCLE_GAIN

        if not profile.training_level:
            profile.training_level = TrainingLevel.BEGINNER

        exercises = self._get_exercises_by_goal_and_level(
            profile.goal, profile.training_level
        )
        nutrition_tips = self._get_nutrition_tips(profile.goal)
        supplements = self._get_supplements(profile.goal)

        return TrainingPlan(
            goal=profile.goal,
            level=profile.training_level,
            days_per_week=profile.training_days_per_week or 3,
            exercises=exercises,
            nutrition_tips=nutrition_tips,
            supplements=supplements,
        )

    def _get_exercises_by_goal_and_level(
        self, goal: Goal, level: TrainingLevel
    ) -> List[Dict[str, Any]]:
        """
        Retorna exerc√≠cios baseados no objetivo e n√≠vel
        """
        base_exercises = {
            TrainingLevel.BEGINNER: [
                {
                    "name": "Agachamento livre",
                    "sets": 3,
                    "reps": "15",
                    "muscle": "Pernas",
                },
                {"name": "Flex√£o de bra√ßo", "sets": 3, "reps": "10", "muscle": "Peito"},
                {"name": "Prancha", "sets": 3, "reps": "30seg", "muscle": "Core"},
                {"name": "Remada curvada", "sets": 3, "reps": "12", "muscle": "Costas"},
            ],
            TrainingLevel.INTERMEDIATE: [
                {
                    "name": "Agachamento com barra",
                    "sets": 4,
                    "reps": "12",
                    "muscle": "Pernas",
                },
                {"name": "Supino reto", "sets": 4, "reps": "10", "muscle": "Peito"},
                {"name": "Leg press", "sets": 3, "reps": "15", "muscle": "Pernas"},
                {"name": "Puxada frontal", "sets": 4, "reps": "12", "muscle": "Costas"},
                {
                    "name": "Desenvolvimento",
                    "sets": 3,
                    "reps": "12",
                    "muscle": "Ombros",
                },
            ],
            TrainingLevel.ADVANCED: [
                {
                    "name": "Agachamento b√∫lgaro",
                    "sets": 4,
                    "reps": "10",
                    "muscle": "Pernas",
                },
                {"name": "Supino inclinado", "sets": 4, "reps": "8", "muscle": "Peito"},
                {"name": "Stiff", "sets": 4, "reps": "12", "muscle": "Posteriores"},
                {"name": "Barra fixa", "sets": 4, "reps": "8", "muscle": "Costas"},
                {
                    "name": "Desenvolvimento Arnold",
                    "sets": 3,
                    "reps": "10",
                    "muscle": "Ombros",
                },
            ],
        }

        exercises = base_exercises.get(level, base_exercises[TrainingLevel.BEGINNER])

        # Ajustar exerc√≠cios baseado no objetivo
        if goal == Goal.WEIGHT_LOSS:
            # Adicionar mais cardio
            exercises.extend(
                [
                    {
                        "name": "HIIT na esteira",
                        "sets": 1,
                        "reps": "20min",
                        "muscle": "Cardio",
                    },
                    {"name": "Burpees", "sets": 3, "reps": "10", "muscle": "Full body"},
                ]
            )

        return exercises

    def _get_nutrition_tips(self, goal: Goal) -> List[str]:
        """
        Retorna dicas de nutri√ß√£o baseadas no objetivo
        """
        tips = {
            Goal.WEIGHT_LOSS: [
                "ü•ó D√©ficit cal√≥rico de 300-500 kcal",
                "üçó Prote√≠na: 2g por kg de peso corporal",
                "ü•ë Gorduras boas: 25-30% das calorias",
                "üçé Carboidratos: Preferencialmente antes/depois treino",
                "üíß 3-4L de √°gua por dia",
            ],
            Goal.MUSCLE_GAIN: [
                "üçΩÔ∏è Super√°vit cal√≥rico de 300-500 kcal",
                "ü•© Prote√≠na: 2.2g por kg de peso corporal",
                "üç† Carboidratos: 4-6g por kg de peso",
                "ü•ú Gorduras: 1g por kg de peso",
                "‚è∞ 6 refei√ß√µes por dia",
            ],
            Goal.TONING: [
                "‚öñÔ∏è Calorias de manuten√ß√£o",
                "üçó Prote√≠na alta: 2g por kg",
                "ü•¶ Muitos vegetais e fibras",
                "üèÉ‚Äç‚ôÇÔ∏è Cardio moderado 3x/semana",
                "üí§ 8h de sono por noite",
            ],
        }

        return tips.get(goal, tips[Goal.MUSCLE_GAIN])

    def _get_supplements(self, goal: Goal) -> List[str]:
        """
        Retorna suplementos recomendados por objetivo
        """
        supplements = {
            Goal.WEIGHT_LOSS: [
                "‚òï Cafe√≠na (200mg pr√©-treino)",
                "üî• L-Carnitina (2g p√≥s-treino)",
                "ü•õ Whey Protein (25g p√≥s-treino)",
                "üêü √îmega 3 (1g por dia)",
            ],
            Goal.MUSCLE_GAIN: [
                "ü•õ Whey Protein (25-30g p√≥s-treino)",
                "üí™ Creatina (5g por dia)",
                "üçå Hipercal√≥rico (se necess√°rio)",
                "üíä Multivitam√≠nico",
                "üêü √îmega 3 (1g por dia)",
            ],
            Goal.TONING: [
                "ü•õ Whey Protein (20g p√≥s-treino)",
                "üí™ Creatina (3g por dia)",
                "‚òï Cafe√≠na pr√©-treino (opcional)",
                "üíä Multivitam√≠nico",
            ],
        }

        return supplements.get(goal, supplements[Goal.MUSCLE_GAIN])

    def is_greeting(self, text: str) -> bool:
        """
        Verifica se o texto √© uma sauda√ß√£o
        """
        text_lower = text.lower().strip()
        return any(greeting in text_lower for greeting in self.greetings)

    def is_farewell(self, text: str) -> bool:
        """
        Verifica se o texto √© uma despedida
        """
        farewell_words = [
            "tchau",
            "bye",
            "at√©",
            "obrigado",
            "obrigada",
            "valeu",
            "flw",
            "falou",
            "xau",
        ]
        text_lower = text.lower()
        return any(word in text_lower for word in farewell_words)

    def is_gratitude(self, text: str) -> bool:
        """
        Verifica se o texto expressa gratid√£o
        """
        gratitude_words = [
            "obrigad",
            "valeu",
            "thanks",
            "muito bom",
            "excelente",
            "perfeito",
            "√≥tim",
            "top",
            "massa",
            "show",
        ]
        text_lower = text.lower()
        return any(word in text_lower for word in gratitude_words)

    def _build_knowledge_base(self) -> Dict[str, Any]:
        """
        Constr√≥i a base de conhecimento especializada
        """
        return {
            "arm_workout": {
                "patterns": [
                    r"treino.*bra[√ßc]o",
                    r"exerc[√≠i]cio.*bra[√ßc]o",
                    r"b[√≠i]ceps.*tr[√≠i]ceps",
                ],
                "response": """üî• **TREINO DE BRA√áO HIPERTROFIA** üí™

**B√çCEPS:**
‚Ä¢ Rosca direta: 4x8-10 (foco na contra√ß√£o)
‚Ä¢ Rosca martelo: 3x10-12 
‚Ä¢ Rosca concentrada: 3x12-15

**TR√çCEPS:**
‚Ä¢ Supino fechado: 4x8-10
‚Ä¢ Mergulho: 3x10-12
‚Ä¢ Tr√≠ceps testa: 3x12-15

**DICAS T√âCNICAS:**
‚úÖ Controle a fase exc√™ntrica (descida lenta)
‚úÖ Aperte bem no pico da contra√ß√£o
‚úÖ Use drop-sets na √∫ltima s√©rie

**Lembra:** O bra√ßo cresce no descanso! 48-72h entre treinos. Bora crescer, guerreiro(a)! üöÄ""",
            },
            "chest_workout": {
                "patterns": [
                    r"treino.*peito",
                    r"exerc[√≠i]cio.*peito",
                    r"supino",
                    r"peitoral",
                ],
                "response": """üî• **TREINO DE PEITO HIPERTROFIA** üí™

**EXERC√çCIOS BASE:**
‚Ä¢ Supino reto: 4x6-8 (for√ßa + massa)
‚Ä¢ Supino inclinado: 4x8-10
‚Ä¢ Crucifixo: 3x12-15
‚Ä¢ Paralelas: 3x10-12

**T√âCNICA PERFEITA:**
‚úÖ Des√ßa a barra at√© o peito
‚úÖ Mantenha esc√°pulas retra√≠das
‚úÖ Explos√£o na subida, controle na descida

**PRO TIP:** Varie os √¢ngulos! Inclinado trabalha por√ß√£o superior, declinado a inferior. Foco na conex√£o mente-m√∫sculo! üéØ

Vai com tudo, atleta! O peito vai explodir! üöÄ""",
            },
            "leg_workout": {
                "patterns": [
                    r"treino.*perna",
                    r"treino.*coxa",
                    r"agachamento",
                    r"gl[√∫u]teo",
                    r"leg day",
                ],
                "response": """üî• **LEG DAY - TREINO DE PERNAS** ü¶µ

**QUADR√çCEPS:**
‚Ä¢ Agachamento livre: 4x8-10
‚Ä¢ Leg press: 4x12-15
‚Ä¢ Cadeira extensora: 3x15-20

**POSTERIORES:**
‚Ä¢ Stiff: 4x10-12
‚Ä¢ Mesa flexora: 3x12-15
‚Ä¢ Agachamento sumo: 3x12-15

**PANTURRILHAS:**
‚Ä¢ Panturrilha em p√©: 4x15-20
‚Ä¢ Panturrilha sentado: 3x20-25

**DICA DE OURO:** Agachamento √© o REI! Desce at√© quebrar o paralelo, sobe explosivo. Perna que n√£o d√≥i, n√£o cresce! üíÄ

Prepara o Rivotril porque vai doer! üòÇüî•""",
            },
            "home_workout": {
                "patterns": [r"treino.*casa", r"casa.*treino", r"sem.*equipamento"],
                "response": """üè† **TREINO EM CASA - RESULTADO GARANTIDO!** üí™

**TREINO COMPLETO (30min):**
‚Ä¢ **Agachamento:** 4x20 
‚Ä¢ **Flex√£o:** 4x15 (joelhos se necess√°rio)
‚Ä¢ **Prancha:** 4x45seg
‚Ä¢ **Burpee:** 3x10
‚Ä¢ **Afundo:** 3x15 cada perna
‚Ä¢ **Mountain climber:** 3x30seg

**EQUIPAMENTOS CASEIROS:**
üè† Garrafas d'√°gua = Halteres
üè† Mochila + livros = Peso extra  
üè† Escada = Step up
üè† Cadeira = Tr√≠ceps

**CRONOGRAMA:**
üìÖ Segunda/Quarta/Sexta: Treino completo
üìÖ Ter√ßa/Quinta: Caminhada 30min
üìÖ Fim de semana: Descanso ativo

Disciplina √© tudo! Treino em casa funciona SIM! üöÄüí™""",
            },
        }

    def find_specialized_response(self, text: str) -> Optional[str]:
        """
        Busca resposta especializada na base de conhecimento
        """
        text_lower = text.lower()

        for topic, data in self.knowledge_base.items():
            for pattern in data["patterns"]:
                if re.search(pattern, text_lower):
                    return data["response"]

        return None

    def generate_response(
        self, user_input: str, conversation_history: List[str] = None
    ) -> str:
        """
        Gera resposta inteligente baseada na entrada do usu√°rio
        """
        if conversation_history is None:
            conversation_history = []

        # Verificar sauda√ß√µes
        if self.is_greeting(user_input):
            return self._get_greeting_response()

        # Verificar despedidas
        if self.is_farewell(user_input):
            return random.choice(self.farewell_responses)

        # Verificar gratid√£o
        if self.is_gratitude(user_input):
            return """Fico feliz em ajudar! üòäüí™ 

√â isso a√≠! Essa energia que eu quero ver! üî•
Estou sempre aqui quando precisar! 

**VOC√ä TEM POTENCIAL INFINITO!** 
Bora ARRASAR! üöÄ‚ú®"""

        # Extrair dados pessoais e gerar plano se dispon√≠vel
        profile = self.extract_personal_data(user_input)

        if profile.weight and profile.height:
            return self._generate_personalized_plan(profile)

        # Buscar resposta especializada
        specialized_response = self.find_specialized_response(user_input)
        if specialized_response:
            return specialized_response

        # Verificar se √© iniciante
        if re.search(
            r"iniciante|come√ßando|nunca.*trein|primeira.*vez", user_input.lower()
        ):
            return self._get_beginner_response()

        # Verificar se quer perder peso
        if re.search(
            r"perder.*peso|emagrecer|queima.*gordura|cutting|definir",
            user_input.lower(),
        ):
            return self._get_weight_loss_response()

        # Resposta padr√£o motivacional
        return self._get_default_response()

    def _get_greeting_response(self) -> str:
        """
        Retorna resposta de sauda√ß√£o personalizada
        """
        responses = [
            """Oi! üëã Que bom te ver aqui! Sou a Hipertrofia.IA, sua personal trainer virtual! üí™

üéØ **ME CONTE RAPIDINHO:**
‚Ä¢ Qual seu objetivo? (ganhar massa, perder peso, definir)
‚Ä¢ Quantos dias pode treinar?
‚Ä¢ Tem alguma d√∫vida espec√≠fica?

**POSSO TE AJUDAR COM:**
üèãÔ∏è‚Äç‚ôÇÔ∏è Treinos personalizados
ü•ó Nutri√ß√£o estrat√©gica  
üìä C√°lculo de IMC
üíä Suplementa√ß√£o
üî• Motiva√ß√£o di√°ria

Bora come√ßar! Me fala o que t√° precisando! üöÄüí™""",
            """Ea√≠! üî• Pronto(a) para ARRASAR no treino hoje? Bora conversar sobre fitness! üí™

üéØ **PARA COME√áAR:**
Me conte sua idade, altura, peso e objetivo!

**Exemplo:** "Tenho 25 anos, 1,75m, 70kg, sou homem e quero ganhar massa"

Vou calcular seu IMC e criar um plano personalizado! üöÄ""",
        ]

        return random.choice(responses)

    def _generate_personalized_plan(self, profile: UserProfile) -> str:
        """
        Gera plano personalizado com base no perfil
        """
        imc_result = self.calculate_imc(profile.weight, profile.height)
        training_plan = self.generate_training_plan(profile)

        response = f"""üéØ **SEUS DADOS ANALISADOS:**
üìä **IMC:** {imc_result.value}
‚öñÔ∏è **Status:** {imc_result.classification}

üí™ **PLANO PERSONALIZADO CRIADO!**

"""

        # Adicionar recomenda√ß√µes do IMC
        for rec in imc_result.recommendations:
            response += f"{rec}\n"

        response += f"""

üèãÔ∏è‚Äç‚ôÇÔ∏è **SEU TREINO ({training_plan.days_per_week}x/semana):**
"""

        # Adicionar exerc√≠cios
        for exercise in training_plan.exercises[:5]:  # Primeiros 5 exerc√≠cios
            response += f"‚Ä¢ {exercise['name']}: {exercise['sets']}x{exercise['reps']}\n"

        response += """
ü•ó **ALIMENTA√á√ÉO:**
"""

        # Adicionar dicas nutricionais
        for tip in training_plan.nutrition_tips[:3]:  # Primeiras 3 dicas
            response += f"{tip}\n"

        response += """
üíä **SUPLEMENTOS:**
"""

        # Adicionar suplementos
        for supplement in training_plan.supplements:
            response += f"{supplement}\n"

        response += """
Quer que eu detalhe seu plano? Me fala! üöÄüí™"""

        return response

    def _get_beginner_response(self) -> str:
        """
        Resposta para iniciantes
        """
        return """üë∂ **GUIA INICIANTE - PASSO A PASSO!** üí™

**PRIMEIRAS 2 SEMANAS:**
üéØ Aprenda os movimentos b√°sicos
‚Ä¢ **Agachamento livre:** 3x15
‚Ä¢ **Flex√£o (joelhos):** 3x10  
‚Ä¢ **Prancha:** 3x30seg
‚Ä¢ **Caminhada:** 20min ap√≥s treino

**SEMANAS 3-4:**
üéØ Adicione resist√™ncia gradual
‚Ä¢ Halteres 2kg nos agachamentos
‚Ä¢ Flex√£o inclinada no banco
‚Ä¢ Prancha 45-60seg

**ALIMENTA√á√ÉO SIMPLES:**
üçΩÔ∏è Prote√≠na em cada refei√ß√£o
üçΩÔ∏è Carboidrato antes/depois do treino
üçΩÔ∏è 8-10 copos de √°gua por dia

**ERROS A EVITAR:**
‚ùå Come√ßar muito pesado
‚ùå Treinar todos os dias
‚ùå Comparar-se com outros
‚ùå Esperar resultados em 1 semana

**EM 30 DIAS** voc√™ j√° vai sentir a diferen√ßa! 
**EM 90 DIAS** todo mundo vai notar! üöÄ

Me conta: quantos dias por semana consegue treinar? üí™"""

    def _get_weight_loss_response(self) -> str:
        """
        Resposta para perda de peso
        """
        return """üî• **PROTOCOLO QUEIMA GORDURA** üí™

**TREINO (5x/semana):**
‚Ä¢ **HIIT:** 20min (30seg alta + 90seg baixa)
‚Ä¢ **Muscula√ß√£o:** 4x10-12 reps
‚Ä¢ **Cardio LISS:** 30-45min (3x/semana)

**ALIMENTA√á√ÉO:**
ü•ó **D√©ficit:** 300-500 kcal por dia
üçó **Prote√≠na:** 2g por kg de peso
ü•ë **Gordura:** 25% das calorias
‚è∞ **Hor√°rios:** 6 refei√ß√µes pequenas

**SUPLEMENTOS:**
‚òï Cafe√≠na pr√©-treino (200mg)
üî• L-Carnitina p√≥s-treino (2g)
ü•õ Whey isolado (25g)

**CRONOGRAMA:**
üìÖ 2¬™/4¬™/6¬™: HIIT + Muscula√ß√£o
üìÖ 3¬™/5¬™: LISS (caminhada/bike)
üìÖ S√°b: Treino leve/yoga
üìÖ Dom: Descanso total

**META:** 0,5-1kg por semana
**EM 12 SEMANAS:** Nova pessoa! üöÄ

Qual sua maior dificuldade? Dieta ou treino? üí™"""

    def _get_default_response(self) -> str:
        """
        Resposta padr√£o motivacional
        """
        responses = [
            """üí™ **HIPERTROFIA.IA SEMPRE AQUI!** üî•

N√£o entendi exatamente sua d√∫vida, mas posso te ajudar com:

üèãÔ∏è‚Äç‚ôÇÔ∏è **Treinos espec√≠ficos:** bra√ßo, peito, pernas, costas
ü•ó **Nutri√ß√£o:** ganho de massa, perda de peso, defini√ß√£o
üìä **C√°lculos:** IMC, necessidades cal√≥ricas
üíä **Suplementa√ß√£o:** whey, creatina, multivitam√≠nicos
üéØ **Objetivos:** iniciante, intermedi√°rio, avan√ßado

Me conta melhor o que voc√™ quer? Sou especialista em transforma√ß√£o! üöÄ""",
            """ü§ñ **HIPERTROFIA.IA √Ä DISPOSI√á√ÉO!** üí™

Posso n√£o ter entendido perfeitamente, mas estou aqui para:

üî• **Motivar** sua jornada fitness
üìà **Planejar** seus treinos
üçΩÔ∏è **Orientar** sua alimenta√ß√£o
üí™ **Acelerar** seus resultados

**DICA DO DIA:** Const√¢ncia vence talento! 
Todo dia √© uma nova oportunidade de evoluir! üöÄ

Reformule sua pergunta que te ajudo melhor! ‚ú®""",
        ]

        return random.choice(responses)
